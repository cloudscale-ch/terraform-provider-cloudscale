# This GitHub action runs your tests for each commit push and/or PR. Optionally
# you can turn it on using a cron schedule for regular testing.
#
name: Tests
on:
  push:
    paths-ignore:
      - 'README.md'
      - 'CHANGELOG.md'
  # For systems with an upstream API that could drift unexpectedly (like most SaaS systems, etc.),
  # we recommend testing at a regular interval not necessarily tied to code changes. This will
  # ensure you are alerted to something breaking due to an API change, even if the code did not
  # change.
  schedule:
    - cron: '44 4 * * *'
jobs:
  # ensure the code builds...
  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version-file: 'go.mod'
        cache: false
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v3

    - name: Build
      run: |
        go build -mod=vendor -v .

  # run acceptance tests in a matrix with Terraform core versions
  test:
    name: Matrix Test
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 120

    strategy:
      fail-fast: true
      max-parallel: 1
      matrix:
        # list whatever Terraform versions here you would like to support
        runs: [
          {terraform: '1.0.0', testargs: "-run TestAccCloudscaleServer_Basic"},
          {terraform: '1.1.0', testargs: "-run TestAccCloudscaleServer_Basic"},
          {terraform: '1.2.0', testargs: "-run TestAccCloudscaleServer_Basic"},
          {terraform: '', testargs: ""},
        ]
    steps:

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version-file: 'go.mod'
        cache: false
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v3

    - name: TF acceptance tests
      timeout-minutes: 120
      env:
        TF_ACC: "1"
        TF_ACC_TERRAFORM_VERSION: ${{ matrix.runs.terraform }}

        # Set whatever additional acceptance test env vars here. You can
        # optionally use data from your repository secrets using the
        # following syntax:
        # SOME_VAR: ${{ secrets.SOME_VAR }}
        CLOUDSCALE_API_TOKEN: ${{ secrets.CLOUDSCALE_TOKEN }}
        TESTARGS: ${{ matrix.runs.testargs }}
      if: env.CLOUDSCALE_API_TOKEN != null

      run: |
        go test -mod=vendor ./... -v $TESTARGS -timeout 120m
